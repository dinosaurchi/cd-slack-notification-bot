# This file contains all available configuration options
# with their default values.

# options for analysis running
run:
  # default concurrency is a available CPU number
  # concurrency: 4

  # timeout for analysis, e.g. 30s, 5m, default is 1m
  timeout: 2m

  # Define the Go version limit.
  # Mainly related to generics support in go1.18.
  # Default: use Go version from the go.mod file, fallback on the env var `GOVERSION`, fallback on 1.17
  # go: "1.18"

  # exit code when at least one issue was found, default is 1
  # issues-exit-code: 1
  # include test files or not, default is true
  # tests: true
  # list of build tags, all linters use it. Default is empty list.
  build-tags:
    - integration # run linting for integration tests
  # which dirs to skip: issues from them won't be reported;
  # skip-dirs:
  #     - src/external_libs
  #     - autogenerated_by_my_lib
  # default is true. Enables skipping of directories:
  #   vendor$, third_party$, testdata$, examples$, Godeps$, builtin$
  # skip-dirs-use-default: true
  # which files to skip: they will be analyzed, but issues from them
  # won't be reported. Default value is empty list
  # skip-files:
  #     - ".*\\.my\\.go$"
  #     - lib/bad.go
  # by default isn't set. If set we pass it to "go list -mod={option}". From "go help modules":
  # If invoked with -mod=readonly, the go command is disallowed from the implicit
  # automatic updating of go.mod described above. Instead, it fails when any changes
  # to go.mod are needed. This setting is most useful to check that go.mod does
  # not need updates, such as in a continuous integration and testing system.
  # If invoked with -mod=vendor, the go command assumes that the vendor
  # directory holds the correct copies of dependencies and ignores
  # the dependency descriptions in go.mod.
  # modules-download-mode: readonly|release|vendor
  modules-download-mode: readonly
  # Allow multiple parallel golangci-lint instances running.
  # If false (default) - golangci-lint acquires file lock on start.
  # allow-parallel-runners: false

# output configuration options
output:
  # colored-line-number|line-number|json|tab|checkstyle|code-climate, default is "colored-line-number"
  format: colored-line-number

  # print lines of code with issue, default is true
  # print-issued-lines: true
  # print linter name in the end of issue text, default is true
  # print-linter-name: true
  # make issues output unique by line, default is true
  # uniq-by-line: true
  # add a prefix to the output file references; default is no prefix
  # path-prefix: ""

# all available settings of specific linters
linters-settings:
  gomoddirectives:
    replace-local: true
    # Allow the replace directive for the "mypackage" module
    replace-allow-list:
      - github.com/gogo/protobuf
      - google.golang.org/grpc
      - github.com/tendermint/tendermint
  #Golint differs from gofmt. Gofmt reformats Go source code, whereas golint prints out style mistakes
  golint:
    min_confidence: 0.8
    set_exit_status: 1
  # Will exit status 1 if there are unformatted files
  gofmt:
    simplify: false
  cyclop:
    # The maximal code complexity to report.
    # Default: 10
    max-complexity: 30
    # The maximal average package complexity.
    # If it's higher than 0.0 (float) the check is enabled
    # Default: 0.0
    # package-average: 10.0
  # errcheck:
  #     check-blank: true
  #     check-type-assertions: true
  # report about not checking of errors in type assertions: `a := b.(MyStruct)`;
  # default is false: such cases aren't reported by default.
  # check-type-assertions: false
  # The custom section can be used to define linter plugins to be loaded at runtime. See README doc
  #  for more info.
  # custom:
  # Each custom linter should have a unique name.
  # example:
  # The path to the plugin *.so. Can be absolute or local. Required for each custom linter
  # path: /path/to/example.so
  # The description of the linter. Optional, just for documentation purposes.
  # description: This is an example usage of a plugin linter.
  # Intended to point to the repo location of the linter. Optional, just for documentation purposes.
  # original-url: github.com/golangci/example-linter
  gocognit:
    # Minimal code complexity to report
    # Default: 30 (but we recommend 10-20)
    min-complexity: 20
  # lll:
  #   line-length: 160
  gocritic:
    # Settings passed to gocritic.
    # The settings key is the name of a supported gocritic checker.
    # The list of supported checkers can be find in https://go-critic.github.io/overview.
    settings:
    captLocal:
      # Whether to restrict checker to params only.
      # Default: true
      paramsOnly: false
    underef:
      # Whether to skip (*x).method() calls where x is a pointer receiver.
      # Default: true
      skipRecvDeref: false
  funlen:
    # Checks the number of lines in a function.
    # If lower than 0, disable the check.
    # Default: 60
    lines: 100
    # Checks the number of statements in a function.
    # If lower than 0, disable the check.
    # Default: 40
    statements: 50
  gomnd:
    # List of function patterns to exclude from analysis.
    # Values always ignored: `time.Date`
    # Default: []
    ignored-functions:
      - os.Chmod
      - os.Mkdir
      - os.MkdirAll
      - os.OpenFile
      - os.WriteFile
      - prometheus.ExponentialBuckets
      - prometheus.ExponentialBucketsRange
      - prometheus.LinearBuckets
      - strconv.FormatFloat
      - strconv.FormatInt
      - strconv.FormatUint
      - strconv.ParseFloat
      - strconv.ParseInt
      - strconv.ParseUint
      - flag.Int
      - flag.IntVar
      - flag.Int64
      - flag.Int64Var
      - flag.Float64
      - flag.Float64Var
      - flag.Bool
      - flag.BoolVar
      - flag.Uint
      - flag.UintVar
      - flag.Uint64
      - flag.Uint64Var
      - flag.String
      - flag.StringVar
      - time.Sleep
      - decimal.NewFrom
      - decimal.RoundBank

  gomodguard:
    local_replace_directives: false
    blocked:
      # List of blocked modules.
      # Default: []
      modules:
        - github.com/golang/protobuf:
            recommendations:
              - google.golang.org/protobuf
            reason: "see https://developers.google.com/protocol-buffers/docs/reference/go/faq#modules"
        - github.com/satori/go.uuid:
            recommendations:
              - github.com/google/uuid
            reason: "satori's package is not maintained"
        - github.com/gofrs/uuid:
            recommendations:
              - github.com/google/uuid
            reason: "see recommendation from dev-infra team: https://confluence.gtforge.com/x/gQI6Aw"

  depguard:
    # This linter is to avoid using some specific packages (and show the recommendation message).
    rules:
      errors-package:
        deny:
          - pkg: "errors"
            desc: "use github.com/pkg/errors instead"
      log-package:
        deny:
          - pkg: "log"
            desc: "use github.com/sirupsen/logrus instead"
      assert-package:
        deny:
          - pkg: "github.com/stretchr/testify/assert"
            desc: "use github.com/stretchr/testify/require instead"

  govet:
    # Enable all analyzers.
    # Default: false
    enable-all: true
    # Disable analyzers by name.
    # Run `go tool vet help` to see all analyzers.
    # Default: []
    disable:
      - fieldalignment # too strict
    # Settings per analyzer.
    settings:
    shadow:
      # Whether to be strict about shadowing; can be noisy.
      # Default: false
      strict: true

  nakedret:
    # Make an issue if func has more lines of code than this setting, and it has naked returns.
    # Default: 30
    max-func-lines: 0

  nolintlint:
    # Exclude following linters from requiring an explanation.
    # Default: []
    allow-no-explanation: [funlen, gocognit, lll]
    # Enable to require an explanation of nonzero length after each nolint directive.
    # Default: false
    require-explanation: true
    # Enable to require nolint directives to mention the specific linter being suppressed.
    # Default: false
    require-specific: true

  # rowserrcheck:
  #     # database/sql is always checked
  #     # Default: []
  #     packages:
  #     - github.com/jmoiron/sqlx

  tenv:
    # The option `all` will run against whole test files (`_test.go`) regardless of method/function signatures.
    # Otherwise, only methods that take `*testing.T`, `*testing.B`, and `testing.TB` as arguments are checked.
    # Default: false
    all: true

  varcheck:
    # Check usage of exported fields and variables.
    # Default: false
    exported-fields: false # default false # TODO: enable after fixing false positives

  wrapcheck:
    ignorePackageGlobs:
      # Only add packages that are known to return wrapped error and frequently used.
      # It is to improve the code base and the the code more readable while avoid returning
      # unwrapped errors.
      - github.com/stretchr/testify/mock # only for testing

  forbidigo:
    # Forbid the following identifiers (list of regexp).
    # Default: ["^(fmt\\.Print(|f|ln)|print|println)$"]
    # Reference: https://golangci-lint.run/usage/linters/#forbidigo
    forbid:
      # Builtin function:
      - p: ^print.*$
        msg: Do not commit print statements.
      - p: ^fmt\.Print.*$
        msg: Do not commit print statements.
      - p: ^fmt\.Error.*$
        msg: Use github.com/pkg/errors instead.
    exclude-godoc-examples: false
    # Instead of matching the literal source code,
    # use type information to replace expressions with strings that contain the package name
    # and (for methods and fields) the type name.
    # This makes it possible to handle import renaming and forbid struct fields and methods.
    # Default: false
    analyze-types: true

linters:
  # First we have to disable all to enable only specific ones
  disable-all: true
  enable:
    ## enabled by default
    #- deadcode # Finds unused code (Replaced by unused)
    - errcheck # Errcheck is a program for checking for unchecked errors in go programs. These unchecked errors can be critical bugs in some cases
    - gosimple # Linter for Go source code that specializes in simplifying a code
    - govet # Vet examines Go source code and reports suspicious constructs, such as Printf calls whose arguments do not align with the format string
    - ineffassign # Detects when assignments to existing variables are not used
    - staticcheck # Staticcheck is a go vet on steroids, applying a ton of static analysis checks
    #- structcheck # Finds unused struct fields (Replaced by unused)
    - typecheck # Like the front-end of a Go compiler, parses and type-checks Go code
    - unused # Checks Go code for unused constants, variables, functions and types
    #- varcheck # Finds unused global variables and constants (Replaced by unused)
    ## disabled by default
    - asciicheck # Simple linter to check that your code does not contain non-ASCII identifiers
    - bidichk # Checks for dangerous unicode character sequences
    - bodyclose # checks whether HTTP response body is closed successfully
    # - contextcheck # check the function whether use a non-inherited context
    - cyclop # checks function and package cyclomatic complexity
    - dupl # Tool for code clone detection
    # - durationcheck # check for two durations multiplied together
    - errname # Checks that sentinel errors are prefixed with the Err and error types are suffixed with the Error.
    - errorlint # errorlint is a linter for that can be used to find code that will cause problems with the error wrapping scheme introduced in Go 1.13.
    - execinquery # execinquery is a linter about query string checker in Query function which reads your Go src files and warning it finds
    - exhaustive # check exhaustiveness of enum switch statements
    - exportloopref # checks for pointers to enclosing loop variables
    - forbidigo # Forbids identifiers
    - funlen # Tool for detection of long functions
    - gochecknoglobals # check that no global variables exist
    - gochecknoinits # Checks that no init functions are present in Go code
    - gocognit # Computes and checks the cognitive complexity of functions
    - goconst # Finds repeated strings that could be replaced by a constant
    - gocritic # Provides diagnostics that check for bugs, performance and style issues.
    - gocyclo # Computes and checks the cyclomatic complexity of functions
    # - godot # Check if comments end in a period
    - goimports # In addition to fixing imports, goimports also formats your code in the same style as gofmt.
    - gomnd # An analyzer to detect magic numbers.
    - gomoddirectives # Manage the use of 'replace', 'retract', and 'excludes' directives in go.mod.
    - gomodguard # Allow and block list linter for direct Go module dependencies. This is different from depguard where there are different block types for example version constraints and module recommendations.
    - goprintffuncname # Checks that printf-like functions are named with f at the end
    - gosec # Inspects source code for security problems
    - lll # Reports long lines
    - makezero # Finds slice declarations with non-zero initial length
    - nakedret # Finds naked returns in functions greater than a specified function length
    - nestif # Reports deeply nested if statements
    - nilerr # Finds the code that returns nil even if it checks that the error is not nil.
    - nilnil # Checks that there is no simultaneous return of nil error and an invalid value.
    # - noctx # noctx finds sending http request without context.Context
    - nolintlint # Reports ill-formed or insufficient nolint directives
    #- nonamedreturns # Reports all named returns
    - nosprintfhostport # Checks for misuse of Sprintf to construct a host with port in a URL.
    - predeclared # find code that shadows one of Go's predeclared identifiers
    - promlinter # Check Prometheus metrics naming via promlint
    - revive # Fast, configurable, extensible, flexible, and beautiful linter for Go. Drop-in replacement of golint.
    - rowserrcheck # checks whether Err of rows is checked successfully
    - sqlclosecheck # Checks that sql.Rows and sql.Stmt are closed.
    - stylecheck # Stylecheck is a replacement for golint
    - tenv # tenv is analyzer that detects using os.Setenv instead of t.Setenv since Go1.17
    - testpackage # linter that makes you use a separate _test package
    # - tparallel # tparallel detects inappropriate usage of t.Parallel() method in your Go test codes
    - unconvert # Remove unnecessary type conversions
    # - unparam # Reports unused function parameters
    # - wastedassign # wastedassign finds wasted assignment statements.
    - whitespace # Tool for detection of leading and trailing whitespace
    ## you may want to enable
    #- decorder # check declaration order and count of types, constants, variables and functions
    #- exhaustruct # Checks if all structure fields are initialized
    #- goheader # Checks is file header matches to pattern
    #- ireturn # Accept Interfaces, Return Concrete Types
    #- prealloc # [premature optimization, but can be used in some cases] Finds slice declarations that could potentially be preallocated
    #- varnamelen # [great idea, but too many false positives] checks that the length of a variable's name matches its scope
    - wrapcheck # Checks that errors returned from external packages are wrapped
    ## disabled
    #- containedctx # containedctx is a linter that detects struct contained context.Context field
    - depguard # [replaced by gomodguard] Go linter that checks if package imports are in a list of acceptable packages
    #- dogsled # Checks assignments with too many blank identifiers (e.g. x, _, _, _, := f())
    #- errchkjson # [don't see profit + I'm against of omitting errors like in the first example https://github.com/breml/errchkjson] Checks types passed to the json encoding functions. Reports unsupported types and optionally reports occasions, where the check for the returned error can be omitted.
    #- forcetypeassert # [replaced by errcheck] finds forced type assertions
    #- gci # Gci controls golang package import order and makes it always deterministic.
    #- godox # Tool for detection of FIXME, TODO and other comment keywords
    #- goerr113 # [too strict] Golang linter to check the errors handling expressions
    #- gofmt # [replaced by goimports] Gofmt checks whether code was gofmt-ed. By default this tool runs with -s option to check for code simplification
    #- gofumpt # [replaced by goimports, gofumports is not available yet] Gofumpt checks whether code was gofumpt-ed.
    #- grouper # An analyzer to analyze expression groups.
    #- ifshort # Checks that your code uses short syntax for if-statements whenever possible
    #- importas # Enforces consistent import aliases
    #- maintidx # maintidx measures the maintainability index of each function.
    #- misspell # [useless] Finds commonly misspelled English words in comments
    #- nlreturn # [too strict and mostly code is not more readable] nlreturn checks for a new line before return and branch statements to increase code clarity
    #- paralleltest # [too many false positives] paralleltest detects missing usage of t.Parallel() method in your Go test
    #- tagliatelle # Checks the struct tags.
    #- thelper # thelper detects golang test helpers without t.Helper() call and checks the consistency of test helpers
    #- wsl # [too strict and mostly code is not more readable] Whitespace Linter - Forces you to use empty lines!
    ## deprecated
    #- exhaustivestruct # [deprecated, replaced by exhaustruct] Checks if all struct's fields are initialized
    #- golint # [deprecated, replaced by revive] Golint differs from gofmt. Gofmt reformats Go source code, whereas golint prints out style mistakes
    #- interfacer # [deprecated] Linter that suggests narrower interface types
    #- maligned # [deprecated, replaced by govet fieldalignment] Tool to detect Go structs that would take less memory if their fields were sorted
    #- scopelint # [deprecated, replaced by exportloopref] Scopelint checks for unpinned variables in go programs

  # disable:
  #     - maligned
  #     - prealloc
  # presets:
  #     - bugs
  #     - unused
  # fast: false

issues:
  # List of regexps of issue texts to exclude, empty list by default.
  # But independently from this option we use default exclude patterns,
  # it can be disabled by `exclude-use-default: false`. To list all
  # excluded by default patterns execute `golangci-lint run --help`
  # exclude:
  #     - abcdef
  # Excluding configuration per-path, per-linter, per-text and per-source
  # exclude-rules:
  # Exclude some linters from running on tests files.
  # - path: _test\.go
  #   linters:
  #       - gocyclo
  #       - errcheck
  #       - gosec
  # Exclude known linters from partially hard-vendored code,
  # which is impossible to exclude via "nolint" comments.
  # - path: internal/hmac/
  #   text: "weak cryptographic primitive"
  #   linters:
  #       - gosec
  # Exclude some staticcheck messages
  # - linters:
  #       - staticcheck
  #   text: "SA9003:"
  # Exclude lll issues for long lines with go:generate
  # - linters:
  #       - lll
  #   source: "^//go:generate "
  # Independently from option `exclude` we use default exclude patterns,
  # it can be disabled by this option. To list all
  # excluded by default patterns execute `golangci-lint run --help`.
  # Default value for this option is true.
  # exclude-use-default: false
  # The default value is false. If set to true exclude and exclude-rules
  # regular expressions become case sensitive.
  # exclude-case-sensitive: false
  # The list of ids of default excludes to include or disable. By default it's empty.
  # include:
  #     - EXC0002 # disable excluding of issues about comments from golint
  # Maximum issues count per one linter. Set to 0 to disable. Default is 50.
  # max-issues-per-linter: 0
  # Maximum count of issues with the same text. Set to 0 to disable. Default is 3.
  # max-same-issues: 0
  # Show only new issues: if there are unstaged changes or untracked files,
  # only those changes are analyzed, else only changes in HEAD~ are analyzed.
  # It's a super-useful option for integration of golangci-lint into existing
  # large codebase. It's not practical to fix all existing issues at the moment
  # of integration: much better don't allow issues in new code.
  # Default is false.
  # new: false
  # Show only new issues created after git revision `REV`
  # new-from-rev: REV
  # Show only new issues created in git patch with set file path.
  # new-from-patch: path/to/patch/file
  exclude-rules:
    - path: _test.go
      linters:
        - funlen
        - gosec
        - lll
        - gomnd
        - dupl
        - goconst

severity:
  # Default value is empty string.
  # Set the default severity for issues. If severity rules are defined and the issues
  # do not match or no severity is provided to the rule this will be the default
  # severity applied. Severities should match the supported severity names of the
  # selected out format.
  # - Code climate: https://docs.codeclimate.com/docs/issues#issue-severity
  # -   Checkstyle: https://checkstyle.sourceforge.io/property_types.html#severity
  # -       Github: https://help.github.com/en/actions/reference/workflow-commands-for-github-actions#setting-an-error-message
  # default-severity: error
  # The default value is false.
  # If set to true severity-rules regular expressions become case sensitive.
  # case-sensitive: false
  # Default value is empty list.
  # When a list of severity rules are provided, severity information will be added to lint
  # issues. Severity rules have the same filtering capability as exclude rules except you
  # are allowed to specify one matcher per severity rule.
  # Only affects out formats that support setting severity information.
  # rules:
  #     - linters:
  #           - dupl
  #       severity: info
